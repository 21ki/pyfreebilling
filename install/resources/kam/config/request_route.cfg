#-- MAIN ROUTING SECTION
# -1- request route
# -2- req init
# -3- within dialog
# -4- relay
# -5- uri update for dialog request
# -6- manage branch
# -7- manage reply
# -8- manage failure
# -9- optionnaly block 3XX

request_route {

    # log the basic info regarding this call
    xlog("L_INFO", "$ci|start|----------------------------\n");
    xlog("L_INFO", "$ci|start|received $pr request $rm $ou\n");
    xlog("L_INFO", "$ci|log|source $si:$sp\n");
    xlog("L_INFO", "$ci|log|from $fu\n");
    xlog("L_INFO", "$ci|log|to $tu\n");

    # siptrace
    #!ifdef WITH_SIPTRACE
      sip_trace();
      setflag(22);
    #!endif

        # per request initial checks
        route(REQINIT);

        # NAT detection
        route(NATDETECT);

    # OPTION processing
    if(is_method("OPTIONS") && uri==myself) {
                sl_send_reply("200","Keepalive");
        xlog("L_INFO", "$ci|stop|----------------------------\n");
                exit;
        }

    # handle requests within SIP dialogs
        route(WITHINDLG);

        ### only initial requests (no To tag)

        # CANCEL processing
        if (is_method("CANCEL")) {
                if (t_check_trans()) {
                        route(RELAY);
                }
                exit;
        }

        # handle retransmissions
        if(t_precheck_trans()) {
                t_check_trans();
                exit;
        }
        t_check_trans();

        # authentication
        route(AUTH);

        # record routing for dialog forming requests (in case they are routed)
        # - remove preloaded route headers
        remove_hf("Route");
        if (is_method("INVITE|SUBSCRIBE")) {
                record_route();
        }

        # account only INVITEs
        if (is_method("INVITE")) {
                setflag(FLT_ACC); # do accounting
        }

        # dispatch requests to foreign domains
        #route(SIPOUT);

        ### requests for my local domains

        # handle presence related requests
        route(PRESENCE);

        # handle registrations
    if (is_method("REGISTER")) {
            route(REGISTRAR);
    }

        if ($rU==$null) {
                # request with no Username in RURI
        xlog("L_INFO", "$ci|stop|-------SIP 484---------------\n");
                sl_send_reply("484","Address Incomplete");
                exit;
        }

    # save callee ID
    $avp(callee) = $rU;
    route(FSDISPATCH);

    route(RELAY);
}

# Wrapper for relaying requests
route[RELAY] {

  xlog("L_INFO", "$ci|log|--RELAY--\n");
        # enable additional event routes for forwarded requests
        # - serial forking, RTP relaying handling, a.s.o.
        if (is_method("INVITE|BYE|SUBSCRIBE|UPDATE")) {
                if(!t_is_set("branch_route")) t_on_branch("MANAGE_BRANCH");
        }
        if (is_method("INVITE|SUBSCRIBE|UPDATE")) {
                if(!t_is_set("onreply_route")) t_on_reply("MANAGE_REPLY");
        }
        if (is_method("INVITE")) {
                if(!t_is_set("failure_route")) t_on_failure("MANAGE_FAILURE");
        }

        if (!t_relay()) {
    xlog("L_INFO", "$ci|end|unable to relay message\n");
                sl_reply_error();
        } else {
    xlog("L_INFO", "$ci|pass|successfull relay $du\n");
  }
  xlog("L_INFO", "$ci|stop|----------------------------\n");
        exit;
}

# Per SIP request initial checks
route[REQINIT] {
    xlog("L_INFO", "$ci|log|--REQINIT--\n");
#!ifdef WITH_ANTIFLOOD
    xlog("L_INFO", "$ci|log|Antiflood protection\n");
        # flood detection from same IP and traffic ban for a while
        # be sure you exclude checking trusted peers, such as pstn gateways
        # - local host excluded (e.g., loop to self)
    if(src_ip!=myself) {
            if($sht(ipban=>$si)!=$null) {
                # ip is already blocked
                xdbg("request from blocked IP - $rm from $fu (IP:$si:$sp)\n");
                xlog("L_INFO", "$ci|stop|----------------------------\n");
                exit;
            }

            if (!pike_check_req()) {
                xlog("L_ALERT","ALERT: pike blocking $rm from $fu (IP:$si:$sp)\n");
                $sht(ipban=>$si) = 1;
                xlog("L_INFO", "$ci|stop|----------------------------\n");
                exit;
            }
    }

    if($ua =~ "friendly-scanner|sipcli|sundayddr") {
        xlog("L_WARN", "$ci|end|dropping message with user-agent $ua from $si:$sp\n");
        xlog("L_INFO", "$ci|stop|----------------------------\n");
        exit;
    }

    xlog("L_INFO", "$ci|log|OK -> continue\n");
#!endif

    if (is_method("INVITE|REGISTER")) {
        if($au =~ "(\=)|(\-\-)|(')|(\#)|(\%27)|(\%24)" and $au != $null) {
            xlog("L_WARN", "$ci|end|Someone from $si is doing an sql injection attack, blocking!\n");
            xlog("L_INFO", "$ci|stop|----------------------------\n");
            exit;
        }
    }

    # initial sanity checks -- messages with
    # max_forwards==0, or excessively long requests
    if (!maxfwd_process("50") && $retcode==-1) {
    xlog("L_WARN", "$ci|end|too much hops from $si:$sp\n");
            sl_send_reply("483","Too Many Hops");
    xlog("L_INFO", "$ci|stop|----------------------------\n");
            exit;
    }
    # next hop is a gateway, so make no sense to
    # forward if MF is 0 (after decrement)
    if ( is_maxfwd_lt("5") ) {
        xlog("L_WARN", "$ci|end|too much hops from $si:$sp\n");
            sl_send_reply("483","Too Many Hops");
        xlog("L_INFO", "$ci|stop|----------------------------\n");
            exit;
    }

        /*if(is_method("OPTIONS") && uri==myself && $rU==$null) {
                sl_send_reply("200","Keepalive");
    xlog("L_INFO", "$ci|stop|----------------------------\n");
                exit;
        }*/

    if(!sanity_check("1511", "7")) {
      xlog("L_WARN", "$ci|end|Malformed SIP message from $si:$sp\n");
      xlog("L_INFO", "$ci|stop|----------------------------\n");
      exit;
    }

    # CVE-2018-8828
    if($(ci{s.len}) + $(hdr(CSeq){s.len}) + $(ft{s.len}) + $(sel(v.branch){s.len}) >= 254) {
      xlog("L_WARN", "$ci|end|Malformed SIP message from $si:$sp - header >=254\n");
      xlog("L_INFO", "$ci|stop|----------------------------\n");
      sl_send_reply("500", "Not accepted");
      exit;
    }
    if($(rU{s.len}) > 32) {
      xlog("L_WARN", "$ci|end|Malformed SIP message from $si:$sp - r-URI username > 32\n");
      xlog("L_INFO", "$ci|stop|----------------------------\n");
      sl_send_reply("500", "Not accepted");
      exit;
    }
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
    xlog("L_INFO", "$ci|log|--WITHINDLG--\n");

    if (!has_totag()) {
        xlog("L_INFO", "$ci|log| return\n");
        return;
    }

    if (is_method("REGISTER")) {
        xlog("L_INFO", "$ci|log| REGISTER method - return\n");
        return;
    }

    # sequential request withing a dialog should
    # take the path determined by record-routing
    if (loose_route()) {
        xlog("L_INFO", "$ci|log|loose route TRUE\n");
        route(DLGURI);

        if (is_method("BYE")) {
            xlog("L_INFO", "$ci|log|Method BYE - set acc flag\n");
            setflag(FLT_ACC); # do accounting ...
            setflag(FLT_ACCFAILED); # ... even if the transaction fails
        } else if ( is_method("ACK") ) {
            # ACK is forwarded statelessy
            xlog("L_INFO", "$ci|log|Method ACK\n");
            route(NATMANAGE);
        } else if ( is_method("NOTIFY") ) {
            xlog("L_INFO", "$ci|log|Method NOTIFY\n");
            # Add Record-Route for in-dialog NOTIFY as per RFC 6665.
           record_route();
        }

        xlog("L_INFO", "$ci|log|Message has tag - no loose route -> relay\n");
        route(RELAY);
        xlog("L_INFO", "$ci|stop|----------------------------\n");
        exit;
    }

    if (is_method("SUBSCRIBE") && uri == myself) {
        # in-dialog subscribe requests
        route(PRESENCE);
        xlog("L_INFO", "$ci|stop|----------------------------\n");
        exit;
    }

    if ( is_method("ACK") ) {
        if ( t_check_trans() ) {
            # no loose-route, but stateful ACK;
            # must be an ACK after a 487
            # or e.g. 404 from upstream server
            route(RELAY);
            xlog("L_INFO", "$ci|stop|----------------------------\n");
            exit;
        } else {
            # ACK without matching transaction ... ignore and discard
            xlog("L_INFO", "$ci|stop|----------------------------\n");
            exit;
        }
    }

    if ( is_method("INVITE") ) {
        sl_send_reply("100","Your Re-INVITE is received");
        if (!t_relay()) {
            sl_reply_error();
            break;
        }
        # sl_send_reply("200","OK");
        exit;
    }


    xlog("L_INFO", "$ci|stop|----------------------------\n");
    sl_send_reply("404","Not here");
    exit;
}

# URI update for dialog requests
route[DLGURI] {
    xlog("L_INFO", "$ci|log|--DLGURI--\n");
        if(!isdsturiset()) {
        xlog("L_INFO", "$ci|log|--destination address URI (outbound proxy address) not set--\n");
                handle_ruri_alias();
        switch ($rc) {
        case -1:
            xlog("L_ERR", "$ci|log|--Failed to handle alias of R-URI $ru--\n");
            send_reply("400", "Bad request");
            exit;
        case 1:
            xlog("L_INFO", "$ci|log|--Alias param was found - Routing in-dialog $rm from $fu to $du--\n");
            break;
        case 2:
            xlog("L_INFO", "$ci|log|--Alias param was not found and nothing was done - Routing in-dialog $rm from $fu to $ru--\n");
            break;
         };
        }
    xlog("L_INFO", "$ci|log| return \n");
        return;
}

# Manage outgoing branches
branch_route[MANAGE_BRANCH] {
    xlog("L_INFO", "$ci|log|--MANAGE_BRANCH--\n");
    xlog("L_INFO", "$ci|log|--new branch [$T_branch_idx] to $ru--\n");
        xdbg("new branch [$T_branch_idx] to $ru\n");
        route(NATMANAGE);
}

# Manage incoming replies
onreply_route[MANAGE_REPLY] {
    xlog("L_INFO", "$ci|log|--MANAGE_REPLY--\n");
    xlog("L_INFO", "$ci|log|--Handling SIP response--\n");
        xdbg("incoming reply\n");
    if(status=~"18[03]") {
        xlog("L_INFO", "$ci|log|--ringing or session in progress--\n");
    }

  #!ifdef WITH_SIPTRACE
    sip_trace();
  #!endif

        if(status=~"[12][0-9][0-9]") {
                route(NATMANAGE);
        }
}

failure_route[MANAGE_FAILURE] {
  xlog("L_INFO", "$ci|log|--MANAGE_FAILURE--\n");
        route(NATMANAGE);

        if (t_is_canceled()) exit;

#!ifdef WITH_BLOCK3XX
        # block call redirect based on 3xx replies.
        if (t_check_status("3[0-9][0-9]")) {
                t_reply("404","Not found");
                exit;
        }
#!endif
}
