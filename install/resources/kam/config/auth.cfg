# IP authorization and user authentication
route[AUTH] {
  xlog("L_INFO", "$ci|log|--AUTH-\n");
  xlog("L_INFO", "$ci|log|Starting auth process ...\n");

  # 1- message from PyFB B2BUA - trusted!
  xlog("L_INFO", "$ci|log|Is the message coming from FS ?\n");
  if(route(FSINBOUND)){
    xlog("L_INFO", "$ci|log| return \n");
    return;
  }

  # 2- message fom customer
  xlog("L_INFO", "$ci|log|IP Auth process ...\n");
  if((!is_method("REGISTER")) && allow_source_address(TRUSTED_ADR_GR_CUST)) {
    setflag(FLAG_FROM_CUST);
    $var(sipaccount) = $avp(s:sipacid);
    append_hf("X-PyFB-AccountId: $avp(s:sipacid)\r\n");
    xlog("L_INFO", "$ci|log|Call from customer : Source IP allowed - sipaccount : $avp(s:sipacid)\n"); # source IP allowed
    xlog("L_INFO", "$ci|log| return \n");
    return;
  }

  # 3- message from provider
  if((!is_method("REGISTER")) && allow_source_address(TRUSTED_ADR_GR_GW)) {
    setflag(FLAG_FROM_PROV);
    xlog("L_INFO", "$ci|log|Call from provider GW : Source IP allowed\n"); # source IP allowed
    xlog("L_INFO", "$ci|log| return \n");
    return;
  }

  # 4- message from a registred gateway
### A TERMINER
  if((!is_method("REGISTER")) && uac_reg_lookup("$rU", "$ru")) {
    setflag(FLAG_FROM_PROV);
    xlog("L_INFO", "$ci|log| request from a remote SIP provider [$rU => $tU]\n");
    ## si URI not DID : $tU in $rU
    $rU = $tU;
    xlog("L_INFO", "$ci|log| request from a remote SIP provider [$rU => $tU]\n");
    xlog("L_INFO", "$ci|log| return \n");
    return;
  }

  # 5- check credential auth
  if (is_method("REGISTER") || uri==myself) {
    # authenticate requests
    if (!auth_check("$fd", "subscriber", "3")) {
      switch ($retcode) {
        case -1:
          xlog("L_WARN", "$ci|log|auth failed - code -1 generic error - src ip: $si\n");
          t_reply("403", "Forbidden");
          exit;
        case -2:
          xlog("L_WARN", "$ci|log|auth failed - code -2 invalid password - src ip: $si\n");
          t_reply("500", "Internal Server Error");
          exit;
        case -3:
          xlog("L_WARN", "$ci|log|auth failed - code -3 invalid user - src ip: $si\n");
          t_reply("400", "Bad Request");
          exit;
        case -4:
          xlog("L_WARN", "$ci|log|auth failed - code -4 nonce exprired - src ip: $si\n");
          break;
        case -5:
          xlog("L_WARN", "$ci|log|auth failed - code -5 no credentials - src ip: $si\n");
          break;
        case -6:
          xlog("L_WARN", "$ci|log|auth failed - code -6 nonce reused - src ip: $si\n");
          break;
        case -8:
          xlog("L_WARN", "$ci|log|auth failed - code -8 authuser mismatch - src ip: $si\n");
          break;
      }

      xlog("L_INFO", "$ci|log|Send auth challenge\n");

      # challenges for authentication by sending 401 for REGISTER and 407 for the other SIP requests
      auth_challenge("$fd", "1");
      xlog("L_INFO", "$ci|stop|----------------------------\n");
      exit;
    }

    setflag(FLAG_FROM_CUST);
    xlog("L_INFO", "$ci|log|User authenticated\n");
    # user authenticated - remove auth header

    if(!is_method("REGISTER|PUBLISH")){
      xlog("L_INFO", "$ci|log|User authenticated - not method REGISTER|PUBLISH\n");
      xlog("L_INFO", "$ci|log|User authenticated - remove auth header\n");
      xlog("L_INFO", "$ci|log|X-PyFB-AccountId: $au\n");
      $var(sipaccount) = $au;
      append_hf("X-PyFB-AccountId: $au\r\n");
      consume_credentials();
    }
  }

  # if caller is not local subscriber, then check if it calls
  # a local destination, otherwise deny, not an open relay here
  if (from_uri!=myself && uri!=myself) {
    xlog("L_INFO", "$ci|log|Message for another relay -> not allowed - END 403\n");
    xlog("L_INFO", "$ci|stop|----------------------------\n");
    sl_send_reply("403","Not relaying");
    exit;
  }

  xlog("L_INFO", "$ci|log| return \n");
  return;
}
