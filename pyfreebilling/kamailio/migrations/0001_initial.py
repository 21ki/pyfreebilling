# -*- coding: utf-8 -*-
# Generated by Django 1.11.10 on 2018-04-06 17:09
from __future__ import unicode_literals

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='GlobalBlackList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prefix', models.CharField(db_index=True, default=b'', help_text='The prefix that is matched for the blacklist', max_length=64)),
                ('whitelist', models.CharField(choices=[(b'0', b'blacklist'), (b'1', b'whitelist')], default=b'0', help_text='Specify if this a blacklist (0) or a whitelist (1) entry', max_length=1)),
                ('description', models.TextField(default=b'', help_text='A comment for the entry', max_length=255)),
            ],
            options={
                'ordering': ('-pk',),
                'db_table': 'globalblacklist',
            },
        ),
        migrations.CreateModel(
            name='Htable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key_name', models.CharField(default=b'', help_text='Name of the hash key', max_length=64)),
                ('key_type', models.IntegerField(default=0, help_text='Type of the key')),
                ('value_type', models.IntegerField(default=0, help_text='Type of the value')),
                ('key_value', models.CharField(default=b'', help_text='The value of the key', max_length=128)),
                ('expires', models.IntegerField(default=0, help_text='The epoch at which the key expires')),
            ],
            options={
                'ordering': ('-pk',),
                'db_table': 'htable',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ruid', models.CharField(default=b'', help_text='Record internal unique id', max_length=64, unique=True)),
                ('username', models.CharField(default=b'', help_text='Username / phone number', max_length=64)),
                ('domain', models.CharField(blank=True, help_text='Doamin name', max_length=64, null=True)),
                ('contact', models.CharField(default=b'', help_text='Contact header field value provides a URI whoses meaning depends on the type of request or response it is in.', max_length=512)),
                ('received', models.CharField(blank=True, help_text='Received IP:PORT in the format SIP:IP:PORT', max_length=128, null=True)),
                ('path', models.CharField(blank=True, help_text='Path Header(s) per RFC 3327', max_length=512, null=True)),
                ('expires', models.DateTimeField(db_index=True, default=b'2030-05-28 21:32:15', help_text='Date and time when this entry expires.')),
                ('q', models.DecimalField(decimal_places=2, default=1.0, help_text='Value used for preferential routing.', max_digits=10)),
                ('callid', models.CharField(default=b'Default-Call-ID', help_text='\t Call-ID header field uniquely identifies a particular invitation or all registrations of a particular client.', max_length=255)),
                ('cseq', models.IntegerField(default=1, help_text='CSeq header field contains a single decimal sequence number and the request method.')),
                ('last_modified', models.DateTimeField(default=b'2000-01-01 00:00:01', help_text='Date and time when this entry was last modified')),
                ('flags', models.IntegerField(default=0, help_text='Internal flags')),
                ('cfags', models.IntegerField(default=0, help_text='Branch and contact flags')),
                ('user_agent', models.CharField(default=b'', help_text='User-Agent header field contains information about the UAC originating the request.', max_length=255)),
                ('socket', models.CharField(blank=True, help_text='Socket used to connect to Kamailio. For example: UDP:IP:PORT', max_length=64, null=True)),
                ('methods', models.IntegerField(blank=True, help_text='Flags that indicate the SIP Methods this contact will accept.', null=True)),
                ('instance', models.CharField(blank=True, help_text='The value of SIP instance parameter for GRUU.', max_length=255, null=True)),
                ('reg_id', models.IntegerField(default=0, help_text='The value of reg-id contact parameter')),
                ('server_id', models.IntegerField(default=0, help_text='The value of server_id from configuration file')),
                ('connection_id', models.IntegerField(default=0, help_text='The value of connection id for location record')),
                ('keepalive', models.IntegerField(default=0, help_text='The value to control sending keep alive requests')),
                ('partition', models.IntegerField(default=0, help_text='The value to of the partition for keep alive requests')),
            ],
            options={
                'ordering': ('-pk',),
                'db_table': 'location',
                'verbose_name': 'user location',
            },
        ),
        migrations.CreateModel(
            name='LocationAttrs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ruid', models.CharField(default=b'', help_text='Record internal unique id', max_length=64)),
                ('username', models.CharField(default=b'', help_text='Username / phone number', max_length=64)),
                ('domain', models.CharField(blank=True, help_text='Domain name', max_length=64, null=True)),
                ('aname', models.CharField(default=b'', help_text='Attribute name', max_length=64)),
                ('atype', models.IntegerField(default=0, help_text='Attribute type')),
                ('avalue', models.CharField(default=b'', help_text='Attribute value', max_length=255)),
                ('last_modified', models.DateTimeField(db_index=True, default=b'2000-01-01 00:00:01', help_text='Date and time when this entry was last modified')),
            ],
            options={
                'ordering': ('-pk',),
                'db_table': 'location_attrs',
            },
        ),
        migrations.CreateModel(
            name='Mtree',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tprefix', models.CharField(default=b'', help_text='Key to be used to index the values in the tree, usually a DID or prefix', max_length=32, unique=True)),
                ('tvalue', models.CharField(default=b'', help_text='The value of the key', max_length=128)),
            ],
            options={
                'ordering': ('-pk',),
                'db_table': 'mtree',
            },
        ),
        migrations.CreateModel(
            name='Mtrees',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tname', models.CharField(default=b'', help_text='Name of shared memory tree', max_length=128)),
                ('tprefix', models.CharField(default=b'', help_text='Key to be used to index the values in the tree, usually a DID or prefix', max_length=32)),
                ('tvalue', models.CharField(default=b'', help_text='The value of the key', max_length=128)),
            ],
            options={
                'ordering': ('-pk',),
                'db_table': 'mtrees',
            },
        ),
        migrations.CreateModel(
            name='PipeLimit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pipeid', models.CharField(default=b'', help_text='Unique ID for pipe', max_length=64)),
                ('algorithm', models.CharField(choices=[(b'NOP', b'NOP'), (b'RED', b'RED'), (b'TAILDROP', b'TAILDROP'), (b'FEEDBACK', b'FEEDBACK'), (b'NETWORK', b'NETWORK')], default=b'TAILDROP', help_text='Algorithm to be used for pipe limits. See the readme of the module for description of available options: NOP, RED, TAILDROP, FEEDBACK, NETWORK', max_length=32)),
                ('plimit', models.IntegerField(default=0, help_text='Pipe limit (hits per second)')),
            ],
            options={
                'ordering': ('-pk',),
                'db_table': 'pl_pipes',
            },
        ),
        migrations.CreateModel(
            name='SpeedDial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(default=b'', help_text='Username / phone number', max_length=64)),
                ('domain', models.CharField(default=b'', help_text='Domain name', max_length=64)),
                ('sd_username', models.CharField(default=b'', help_text='Speed dial username', max_length=64)),
                ('sd_domain', models.CharField(default=b'', help_text='Speed dial domain', max_length=64)),
                ('new_uri', models.CharField(default=b'', help_text='New URI', max_length=128)),
                ('fname', models.CharField(default=b'', help_text='First name', max_length=64)),
                ('lname', models.CharField(default=b'', help_text='Last name', max_length=64)),
                ('description', models.CharField(default=b'', help_text='Description', max_length=64)),
            ],
            options={
                'ordering': ('-pk',),
                'db_table': 'speed_dial',
            },
        ),
        migrations.CreateModel(
            name='UserBlackList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(default=b'', help_text='The user that is used for the blacklist lookup', max_length=64)),
                ('domain', models.CharField(default=b'', help_text='The domain that is used for the blacklist lookup', max_length=64)),
                ('prefix', models.CharField(default=b'', help_text='The prefix that is matched for the blacklist', max_length=64)),
                ('whitelist', models.CharField(choices=[(b'0', b'blacklist'), (b'1', b'whitelist')], default=b'0', help_text='Specify if this a blacklist (0) or a whitelist (1) entry', max_length=1)),
            ],
            options={
                'ordering': ('-pk',),
                'db_table': 'userblacklist',
            },
        ),
        migrations.CreateModel(
            name='Version',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('table_name', models.CharField(max_length=32, unique=True)),
                ('table_version', models.IntegerField(default=0)),
            ],
            options={
                'ordering': ('-pk',),
            },
        ),
        migrations.AddIndex(
            model_name='userblacklist',
            index=models.Index(fields=[b'username', b'domain', b'prefix'], name='userblackli_usernam_90d9fe_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='speeddial',
            unique_together=set([('username', 'domain', 'sd_domain', 'sd_username')]),
        ),
        migrations.AlterUniqueTogether(
            name='mtrees',
            unique_together=set([('tname', 'tprefix', 'tvalue')]),
        ),
        migrations.AddIndex(
            model_name='locationattrs',
            index=models.Index(fields=[b'username', b'domain', b'ruid'], name='location_at_usernam_1d74be_idx'),
        ),
        migrations.AddIndex(
            model_name='location',
            index=models.Index(fields=[b'username', b'domain', b'contact'], name='location_usernam_61c9cb_idx'),
        ),
        migrations.AddIndex(
            model_name='location',
            index=models.Index(fields=[b'server_id', b'connection_id'], name='location_server__3d62be_idx'),
        ),
    ]
