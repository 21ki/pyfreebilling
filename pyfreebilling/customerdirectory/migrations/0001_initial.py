# -*- coding: utf-8 -*-
# Generated by Django 1.9.10 on 2016-10-29 09:34
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import pyfreebilling.pyfreebill.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        #('pyfreebill', '0005_auto_20161029_1134'),
        ('pyfreebill', '0004_auto_20161029_1103'),
    ]

    state_operations = [
        migrations.CreateModel(
            name='CustomerDirectory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration', models.BooleanField(default=False, help_text='Is registration needed\n                                       for calling ? True, the phone needs to\n                                       register with correct username/password.\n                                       If false, you must specify a CIDR in SIP\n                                       IP CIDR !', verbose_name='Registration')),
                ('password', models.CharField(blank=True, help_text="It's recommended to use strong\n                                passwords for the endpoint.", max_length=100, verbose_name='password')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('name', models.CharField(help_text='Ex.: customer SIP username, etc...', max_length=50, unique=True, verbose_name='SIP username')),
                ('rtp_ip', models.CharField(default=b'auto', help_text='Internal IP address/mask to bind\n                              to for RTP. Format : CIDR Ex. 192.168.1.0/32', max_length=100, verbose_name='RTP IP CIDR')),
                ('sip_ip', models.CharField(blank=True, help_text='Internal IP address/mask to bind\n                              to for SIP. Format : CIDR. Ex. 192.168.1.0/32\n                              ', max_length=100, null=True, validators=[pyfreebilling.pyfreebill.validators.validate_cidr], verbose_name='SIP IP CIDR')),
                ('sip_port', models.PositiveIntegerField(default=5060, verbose_name='SIP port')),
                ('max_calls', models.PositiveIntegerField(default=1, help_text='max simultaneous\n                                            calls allowed for this customer\n                                            account.', verbose_name='max calls')),
                ('calls_per_second', models.PositiveIntegerField(default=10, help_text='maximum\n                                                   calls per second allowed for\n                                                   this customer account.', verbose_name='max calls per second')),
                ('log_auth_failures', models.BooleanField(default=False, help_text='It true, the server\n                                            will log authentication failures.\n                                            Required for Fail2ban.', verbose_name='log auth failures')),
                ('codecs', models.CharField(choices=[(b'PCMA,PCMU,G729', 'PCMA,PCMU,G729'), (b'PCMU,PCMA,G729', 'PCMU,PCMA,G729'), (b'G729,PCMA,PCMU', 'G729,PCMA,PCMU'), (b'G729,PCMU,PCMA', 'G729,PCMU,PCMA'), (b'PCMA,G729', 'PCMA,G729'), (b'PCMU,G729', 'PCMU,G729'), (b'G729,PCMA', 'G729,PCMA'), (b'G729,PCMU', 'G729,PCMU'), (b'PCMA,PCMU', 'PCMA,PCMU'), (b'PCMU,PCMA', 'PCMU,PCMA'), (b'G722,PCMA,PCMU', 'G722,PCMA,PCMU'), (b'G722,PCMU,PCMA', 'G722,PCMU,PCMA'), (b'G722', 'G722'), (b'G729', 'G729'), (b'PCMU', 'PCMU'), (b'PCMA', 'PCMA'), (b'ALL', 'ALL')], default=b'ALL', help_text='Codecs allowed - beware about\n                              order, 1st has high priority ', max_length=100, verbose_name='Codecs')),
                ('multiple_registrations', models.CharField(choices=[(b'call-id', 'Call-id'), (b'contact', 'Contact'), (b'false', 'False'), (b'true', 'True')], default=b'false', help_text='Used to allow to\n                                              call one extension and ring\n                                              several phones.', max_length=100, verbose_name='multiple registrations')),
                ('outbound_caller_id_name', models.CharField(blank=True, help_text='Caller ID name\n                                               sent to provider on outbound\n                                               calls.', max_length=50, verbose_name='CallerID name')),
                ('outbound_caller_id_number', models.CharField(blank=True, help_text='Caller ID\n                                                 number sent to provider on\n                                                 outbound calls.', max_length=80, verbose_name='CallerID\n                                                   num')),
                ('ignore_early_media', models.CharField(choices=[(b'false', 'false'), (b'true', 'true'), (b'ring_ready', 'ring_ready')], default=b'false', help_text='Controls if the call\n                                                      returns on early media\n                                                      or not. Default is false.\n                                                      Setting the value to\n                                                      "ring_ready" will work\n                                                      the same as\n                                                      ignore_early_media=true\n                                                      but also send a SIP 180\n                                                      to the inbound leg when\n                                                      the first SIP 183 is\n                                                      caught.\n                                                      ', max_length=20, verbose_name='Ignore early media')),
                ('enabled', models.BooleanField(default=True, verbose_name='Enabled / Disabled')),
                ('fake_ring', models.BooleanField(default=False, help_text='Fake ring : Enabled /\n                                    Disabled - Send a fake ring to the\n                                    caller.', verbose_name='Fake ring')),
                ('cli_debug', models.BooleanField(default=False, help_text='CLI debug : Enabled /\n                                    Disabled - Permit to see all debug\n                                    messages on cli.', verbose_name='CLI debug')),
                ('vmd', models.BooleanField(default=False, help_text='Be carefull with this option, as\n                              it takes a lot of ressources !.', verbose_name='Voicemail detection : Enabled / Disabled')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='date added')),
                ('date_modified', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyfreebill.Company', verbose_name='company')),
            ],
            options={
                'ordering': ('company', 'name'),
                'db_table': 'customer_directory',
                'verbose_name': 'Customer sip account',
                'verbose_name_plural': 'Customer sip accounts',
            },
        ),
    ]

    operations = [
        # By running only state operations, we are making Django think it has
        # applied this migration to the database. In reality, we renamed a
        # "cars_tires" table to "tires_tires" earlier.
        migrations.SeparateDatabaseAndState(state_operations=state_operations)
    ]
